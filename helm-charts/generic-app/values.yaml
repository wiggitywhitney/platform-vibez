# Default values for generic-app
# Platform-opinionated Helm chart with enforced guardrails and smart defaults
# 
# PLATFORM PHILOSOPHY:
# - Enforce sensible defaults, reduce configuration surface
# - Validate inputs with hard guardrails to prevent cluster damage
# - Auto-calculate optimal values (e.g., 50% resource requests)
# - Mandatory security and reliability features (health checks, HA)

# =============================================================================
# APPLICATION CONFIGURATION (Optional)
# =============================================================================
app:
  name: ""  # Override app name (uses release name if empty)
            # Useful for decoupling chart name from actual app name

# =============================================================================
# IMAGE CONFIGURATION (Required with Validation)
# =============================================================================
image:
  repository: ""  # REQUIRED: Container image repository
                  # VALIDATION: Must not contain "latest" anywhere
                  # VALIDATION: Cannot be empty (required field)
  tag: ""         # REQUIRED: Image tag/version  
                  # VALIDATION: Must not be "latest" or contain "latest"
                  # VALIDATION: Cannot be empty (required field)
                  # REASON: Prevents drift and ensures reproducible deployments

# =============================================================================
# CONTAINER CONFIGURATION
# =============================================================================
container:
  port: 80        # SINGLE SOURCE OF TRUTH: Container port for the application
                  # AUTO-SYNC: Service port automatically matches this value
                  # AUTO-SYNC: Ingress port automatically matches this value
                  # REASON: Eliminates port configuration drift and complexity
                  # NOTE: No protocol field - K8s defaults to TCP
  # Environment variables (optional)
  env: []
  # Examples:
  # - name: ENV_VAR
  #   value: "value"
  # - name: API_URL
  #   value: "https://api.example.com"

# =============================================================================
# HEALTH CHECKS (Mandatory - Platform Enforced)
# =============================================================================
healthChecks:
  path: "/"       # Health check endpoint path (e.g., "/health", "/api/health")
                  # PLATFORM DECISION: Health checks are MANDATORY in all environments
                  # PLATFORM DECISION: HTTP-only (no TCP/exec probes for consistency)
                  # REASON: Prevents deployment of unhealthy applications
                  # NOTE: Always creates both liveness and readiness probes

# =============================================================================
# RESOURCE CONFIGURATION (Smart Defaults with Guardrails)
# =============================================================================
resources:
  cpu: "500m"     # CPU limit - requests auto-calculated to 50% of this value
                  # GUARDRAILS: Must be between 100m and 4000m (0.1-4 cores)
                  # AUTO-CALC: Requests = limits * 0.5 (e.g., 500m → 250m requests)
  memory: "512Mi" # Memory limit - requests auto-calculated to 50% of this value
                  # GUARDRAILS: Must be between 128Mi and 8192Mi (8Gi)
                  # GUARDRAILS: Must use Mi or Gi units only
                  # AUTO-CALC: Requests = limits * 0.5 (e.g., 512Mi → 256Mi requests)
                  # REASON: Enforces resource discipline, prevents resource starvation

# =============================================================================
# HORIZONTAL POD AUTOSCALER (Opinionated with Guardrails)
# =============================================================================
autoscaling:
  enabled: false
  minReplicas: 2  # PLATFORM DECISION: HA by default (minimum 2 replicas)
                  # GUARDRAILS: Must be between 1 and 10
                  # REASON: Encourages high availability by default
  maxReplicas: 5  # PLATFORM DECISION: Sensible default for most applications
                  # GUARDRAILS: Must be between 2 and 20 (hard platform limit)
                  # VALIDATION: Must be greater than minReplicas
                  # REASON: Prevents runaway scaling that could consume cluster resources
                  
  # PLATFORM ENFORCED: CPU and Memory utilization targets hardcoded to 75%
  # REASON: Removes configuration complexity, enforces consistent scaling behavior
  # NOTE: No user configuration - scales at 75% CPU AND 75% memory utilization

# =============================================================================
# SERVICE CONFIGURATION (Always Created - Platform Enforced)
# =============================================================================
# PLATFORM DECISION: Service always created for cluster communication
# REASON: 99% of applications need services for pod discovery and networking
# AUTO-SYNC: Service port automatically matches container.port (no separate config)
# AUTO-SYNC: Service targets container port via named port reference "http"
# NOTE: Use ingress for external access, service handles internal cluster traffic
# NOTE: No service.type field - K8s defaults to ClusterIP

# =============================================================================
# INGRESS CONFIGURATION
# =============================================================================
ingress:
  enabled: false  # Disabled by default - enable when external access needed
  hosts:
    - host: chart-example.local
  tls:
    enabled: false  # Enable HTTPS with cert-manager
  # PLATFORM MANAGED (not exposed to users):
  # - className: "nginx" (hardcoded to ingress-nginx)
  # - annotations: {} (none for now, platform adds as needed)
  # - paths: [{path: "/", pathType: "Prefix"}] (hardcoded)
  # - tls.issuer: "letsencrypt-prod" (hardcoded cert-manager issuer)
  # - tls.secretName: auto-generated from release name + "-tls"

# =============================================================================
# SECURITY & POD CONFIGURATION
# =============================================================================
# PLATFORM PHILOSOPHY: Security contexts are complex and should be platform-managed
# Users don't need to configure these - platform provides sensible defaults
# 
# PLATFORM MANAGED (not exposed to users):
# - podSecurityContext: {} (platform handles)
# - securityContext: {} (platform handles)
# - podAnnotations: {} (platform handles)
# - podLabels: {} (platform handles)

# =============================================================================
# SCHEDULING
# =============================================================================
# PLATFORM PHILOSOPHY: Scheduling is complex and should be platform-managed
# Users don't need to configure node selection, tolerations, or affinity
# 
# PLATFORM MANAGED (not exposed to users):
# - nodeSelector: {} (platform handles node selection)
# - tolerations: [] (platform handles pod tolerations)
# - affinity: {} (platform handles pod affinity/anti-affinity)



# =============================================================================
# VALIDATION SUMMARY
# =============================================================================
# The following validations are enforced by this chart:
#
# IMAGE VALIDATION:
# - No "latest" tags allowed anywhere in repository or tag
# - Repository and tag cannot be empty
#
# RESOURCE VALIDATION:
# - CPU: 100m to 4000m (0.1 to 4 cores)
# - Memory: 128Mi to 8192Mi (8Gi), must use Mi/Gi units
# - Requests auto-calculated to 50% of limits
#
# AUTOSCALING VALIDATION (when enabled):
# - minReplicas: 1 to 10
# - maxReplicas: 2 to 20
# - maxReplicas must be > minReplicas
# - CPU/Memory targets hardcoded to 75%
#
# PLATFORM ENFORCED FEATURES:
# - HTTP health checks are mandatory
# - Service always created (no toggle) with auto-synced ports
# - HA encouraged with minReplicas: 2 default
#
# PORT AUTO-SYNCHRONIZATION:
# - container.port is the single source of truth
# - Service port automatically matches container.port
# - Ingress port automatically matches container.port
# - Eliminates port configuration drift and complexity 