# Platform Vibez - Governance Policies
# ====================================
# Example Kyverno policies for platform governance and security

apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: require-labels
  annotations:
    policies.kyverno.io/title: Require Labels
    policies.kyverno.io/category: Platform Governance
    policies.kyverno.io/description: >-
      Ensures all deployments have required platform labels for observability and governance.
spec:
  validationFailureAction: Enforce
  background: true
  rules:
  - name: check-team-label
    match:
      any:
      - resources:
          kinds:
          - Deployment
    validate:
      message: "Deployment must have a 'team' label"
      pattern:
        metadata:
          labels:
            team: "?*"

---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: disallow-latest-tag
  annotations:
    policies.kyverno.io/title: Disallow Latest Tag
    policies.kyverno.io/category: Platform Security
    policies.kyverno.io/description: >-
      Prevents use of 'latest' tag in container images for reproducible deployments.
spec:
  validationFailureAction: Enforce
  background: true
  rules:
  - name: check-image-tag
    match:
      any:
      - resources:
          kinds:
          - Deployment
    validate:
      message: "Container images must not use 'latest' tag. Specify a version tag."
      deny:
        conditions:
          any:
          - key: "{{ request.object.spec.template.spec.containers[*].image }}"
            operator: AnyIn
            value: ["*:latest"]
          - key: "{{ request.object.spec.template.spec.containers[*].image | [?ends_with(@, ':latest')] | length(@) }}"
            operator: GreaterThan
            value: 0

---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: require-resource-limits
  annotations:
    policies.kyverno.io/title: Require Resource Limits
    policies.kyverno.io/category: Platform Resources
    policies.kyverno.io/description: >-
      Ensures all containers have CPU and memory limits for resource management.
spec:
  validationFailureAction: Enforce
  background: true
  rules:
  - name: check-resource-limits
    match:
      any:
      - resources:
          kinds:
          - Deployment
    validate:
      message: "All containers must have CPU and memory limits specified"
      pattern:
        spec:
          template:
            spec:
              containers:
              - name: "*"
                resources:
                  limits:
                    memory: "?*"
                    cpu: "?*" 

---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: enforce-cpu-limits
  annotations:
    policies.kyverno.io/title: Enforce CPU Limits
    policies.kyverno.io/category: Platform Resources  
    policies.kyverno.io/description: >-
      Ensures CPU limits are within platform bounds (100m to 4000m) to prevent resource hogging.
spec:
  validationFailureAction: Enforce
  background: true
  rules:
  - name: check-cpu-limits
    match:
      any:
      - resources:
          kinds:
          - Deployment
    validate:
      message: "CPU limits must be between 100m and 4000m (0.1 to 4 cores). Found: {{ request.object.spec.template.spec.containers[0].resources.limits.cpu || 'none' }}"
      deny:
        conditions:
          any:
          # Deny common values that are too low (millicore format)
          - key: "{{ request.object.spec.template.spec.containers[*].resources.limits.cpu }}"
            operator: AnyIn  
            value: ["1m", "2m", "5m", "10m", "20m", "25m", "30m", "40m", "50m", "60m", "70m", "80m", "90m", "99m"]
          # Deny decimal values that are too low  
          - key: "{{ request.object.spec.template.spec.containers[*].resources.limits.cpu }}"
            operator: AnyIn
            value: ["0.001", "0.01", "0.02", "0.05", "0.09"] 